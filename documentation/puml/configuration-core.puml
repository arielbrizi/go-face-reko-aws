@startuml
namespace configurationadapterin {
    class APIAdapter << (S,Aquamarine) >> {
        - faceIndexerService portin.ConfigurationPort

        + AddAuthorizedFaceHandler(c *gin.Context) 
        + DeleteAuthorizedFaceHandler(c *gin.Context) 
        + GetAuthorizedFacesHandler(c *gin.Context) 

    }
    class DirectoryAdapter << (S,Aquamarine) >> {
        - faceIndexerService portin.ConfigurationPort

        + AddAuthorizedFaces() error

    }
}


"configurationadapterin.APIAdapter" o-- "portin.ConfigurationPort"
"configurationadapterin.DirectoryAdapter" o-- "portin.ConfigurationPort"

namespace configurationadapterout {
    class RekoAdapter << (S,Aquamarine) >> {
        - svc *rekognition.Rekognition

        + DeleteCollection(collectionName string) error
        + CreateCollection(collectionName string) error
        + IndexFace(image domain.AuthorizedFace) (*string, error)
        + DeleteFace(authorizedFace domain.AuthorizedFace) error
        + ListFaces(collectionName string) ([]domain.AuthorizedFace, error)

    }
    class RekoAdapterTest << (S,Aquamarine) >> {
        + IndexFace(image domain.AuthorizedFace) (*string, error)
        + DeleteFace(image domain.AuthorizedFace) error
        + ListFaces(collectionName string) ([]domain.AuthorizedFace, error)
        + CreateCollection(collectionName string) error
        + DeleteCollection(collectionName string) error

    }
}

"configurationapplicationportout.ImageRecognitionPort" <|-- "configurationadapterout.RekoAdapter"
"configurationapplicationportout.ImageRecognitionPort" <|-- "configurationadapterout.RekoAdapterTest"

"configurationadapterout.RekoAdapter" o-- "rekognition.Rekognition"

namespace configurationapplication {
    class FaceIndexerService << (S,Aquamarine) >> {
        - recoAdapter portout.ImageRecognitionPort

        + AddAuthorizedFace(image []byte, name string, bucket string, collectionName string) (*domain.AuthorizedFace, error)
        + DeleteAuthorizedFace(authorizedFace domain.AuthorizedFace) error
        + GetAuthorizedFaces(collectionName string) ([]domain.AuthorizedFace, error)

    }
}

"configurationapplicationportin.ConfigurationPort" <|-- "configurationapplication.FaceIndexerService"

"configurationapplication.FaceIndexerService" o-- "portout.ImageRecognitionPort"

namespace configurationapplicationportin {
    interface ConfigurationPort  {
        + AddAuthorizedFace(image []byte, name string, bucket string, collectionName string) (*domain.AuthorizedFace, error)
        + DeleteAuthorizedFace( domain.AuthorizedFace) error
        + GetAuthorizedFaces(collectionName string) ([]domain.AuthorizedFace, error)

    }
}



namespace configurationapplicationportout {
    interface ImageRecognitionPort  {
        + DeleteCollection(collectionName string) error
        + CreateCollection(collectionName string) error
        + IndexFace(authorizedFace domain.AuthorizedFace) (*string, error)
        + DeleteFace(authorizedFace domain.AuthorizedFace) error
        + ListFaces(collectionName string) ([]domain.AuthorizedFace, error)

    }
}



@enduml
