@startuml
namespace storageadapterin {
    class FtpToInputAdapter << (S,Aquamarine) >> {
        - imageProcessingService portin.InputImagePort
        - video2ImageService portin.InputVideoPort

        + Process() 

    }
}


"storageadapterin.FtpToInputAdapter" o-- "portin.InputImagePort"
"storageadapterin.FtpToInputAdapter" o-- "portin.InputVideoPort"

namespace storageadapterout {
    class Image2S3Adapter << (S,Aquamarine) >> {
        - bucket string
        - uploader s3manager.Uploader

        + Save(image domain.Image) error

    }
    class KafkaAdapter << (S,Aquamarine) >> {
        - conn *kafka.Conn

        + SendImage2Queue(image domain.Image) error

    }
}

"storageapplicationportout.StorageImagePort" <|-- "storageadapterout.Image2S3Adapter"
"storageapplicationportout.QueueImagePort" <|-- "storageadapterout.KafkaAdapter"

"storageadapterout.Image2S3Adapter" o-- "s3manager.Uploader"
"storageadapterout.KafkaAdapter" o-- "kafka.Conn"

namespace storageapplication {
    class Image2QueueService << (S,Aquamarine) >> {
        - imageToQueueAdapter portout.QueueImagePort

        + SendImage2Queue(image domain.Image) error

    }
    class ImageProcessingService << (S,Aquamarine) >> {
        - image2QueueService Image2QueueService
        - storageImageAdapter portout.StorageImagePort

        + ProcessImage(imgData []byte, fileName string) error

    }
    class Video2ImageService << (S,Aquamarine) >> {
        - imageProcessingService ImageProcessingService

        + ProcessVideo(videoData []byte, fileName string) error

    }
}

"storageapplicationportout.QueueImagePort" <|-- "storageapplication.Image2QueueService"
"storageapplicationportin.InputImagePort" <|-- "storageapplication.ImageProcessingService"
"storageapplicationportin.InputVideoPort" <|-- "storageapplication.Video2ImageService"

"storageapplication.Image2QueueService" o-- "portout.QueueImagePort"
"storageapplication.ImageProcessingService" o-- "portout.StorageImagePort"
"storageapplication.ImageProcessingService" o-- "storageapplication.Image2QueueService"
"storageapplication.Video2ImageService" o-- "storageapplication.ImageProcessingService"

namespace storageapplicationportin {
    interface InputImagePort  {
        + ProcessImage(imgData []byte, fileName string) error

    }
    interface InputVideoPort  {
        + ProcessVideo(videoData []byte, fileName string) error

    }
}



namespace storageapplicationportout {
    interface QueueImagePort  {
        + SendImage2Queue(image domain.Image) error

    }
    interface StorageImagePort  {
        + Save(image domain.Image) error

    }
}



@enduml
